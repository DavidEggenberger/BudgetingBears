// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.AccountSG", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SolutionDesiredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("abweichungvomvorjahresbudget")
                        .HasColumnType("int");

                    b.Property<string>("aufwandertrag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("budget_2020")
                        .HasColumnType("decimal(26,6)");

                    b.Property<decimal>("budget_2021")
                        .HasColumnType("decimal(26,6)");

                    b.Property<string>("ebene1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ebene2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("konto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kontostruktur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kontotitel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("rechnung_2019")
                        .HasColumnType("decimal(26,6)");

                    b.Property<string>("titel_nr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("typ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zeilennummer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SolutionDesiredId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Entities.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Entities.CommentToOrdering", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SolutionDesiredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SolutionDesiredId");

                    b.ToTable("CommentToOrdering");
                });

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Budget2020")
                        .HasColumnType("decimal(26,6)");

                    b.Property<decimal>("Budget2021")
                        .HasColumnType("decimal(26,6)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ChangeToPrevious")
                        .HasColumnType("decimal(26,6)");

                    b.Property<decimal>("Cost2019")
                        .HasColumnType("decimal(26,6)");

                    b.Property<int>("CountOfAccounts")
                        .HasColumnType("int");

                    b.Property<string>("Level1Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Entities.SolutionDesired", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("Entities.Vote", b =>
                {
                    b.Property<Guid>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VoteId");

                    b.HasIndex("PostId");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("Entities.VoteToOrdering", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SolutionDesiredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SolutionDesiredId");

                    b.ToTable("VoteToOrdering");
                });

            modelBuilder.Entity("Entities.AccountSG", b =>
                {
                    b.HasOne("Entities.SolutionDesired", null)
                        .WithMany("OrderofAccounts")
                        .HasForeignKey("SolutionDesiredId");
                });

            modelBuilder.Entity("Entities.Comment", b =>
                {
                    b.HasOne("Entities.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Entities.CommentToOrdering", b =>
                {
                    b.HasOne("Entities.SolutionDesired", null)
                        .WithMany("Comments")
                        .HasForeignKey("SolutionDesiredId");
                });

            modelBuilder.Entity("Entities.Vote", b =>
                {
                    b.HasOne("Entities.Post", null)
                        .WithMany("Votes")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Entities.VoteToOrdering", b =>
                {
                    b.HasOne("Entities.SolutionDesired", null)
                        .WithMany("Votes")
                        .HasForeignKey("SolutionDesiredId");
                });

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Entities.SolutionDesired", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OrderofAccounts");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
